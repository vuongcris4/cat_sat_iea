from ortools.sat.python import cp_model
import numpy as np

def solve_cp_model(a, k, length):
    # Ki·ªÉm tra ƒë·ªô d√†i m·∫£ng a v√† k
    a = np.array(a)
    k = np.array(k)
    n = len(a)
    if len(k) != n:
        raise ValueError("M·∫£ng k ph·∫£i c√≥ c√πng k√≠ch th∆∞·ªõc v·ªõi m·∫£ng a")

    # T·∫°o m√¥ h√¨nh
    model = cp_model.CpModel()

    # 1. X√°c ƒë·ªãnh c√°c v·ªã tr√≠ ƒë·∫∑c bi·ªát (k_i != 1)
    special_indices = [i for i in range(n) if k[i] != 1]

    # 2. Khai b√°o bi·∫øn x_i
    x = []
    for i in range(n):
        # if k[i] == 1:
        #     x.append(model.NewIntVar(1, length, f'x_{i+1}'))  # x_i >= 1, gi·ªõi h·∫°n tr√™n l√† length
        # else:
        x.append(model.NewIntVar(0, length, f'x_{i+1}')) # x_i >= 0, gi·ªõi h·∫°n tr√™n l√† length

    # 3. Bi·∫øn nh·ªã ph√¢n b_i cho c√°c v·ªã tr√≠ ƒë·∫∑c bi·ªát
    b = [model.NewBoolVar(f'b_{i+1}') for i in special_indices]

    # 4. R√†ng bu·ªôc gi·ªØa x_i v√† b_i
    M = length # H·∫±ng s·ªë l·ªõn ƒë∆∞·ª£c thay b·∫±ng length
    for idx, i in enumerate(special_indices):
        model.Add(x[i] <= M * b[idx]) # N·∫øu x_i > 0 th√¨ b_i = 1
        model.Add(x[i] >= b[idx]) # N·∫øu b_i = 1 th√¨ x_i >= 1

    # 5. T√≠nh s: s·ªë bi·∫øn kh√°c 0 t·∫°i c√°c v·ªã tr√≠ ƒë·∫∑c bi·ªát
    s = model.NewIntVar(0, len(special_indices), 's')
    model.Add(s == sum(b))

    #       S L√Ä S·ªê L∆Ø·ª¢NG ƒêO·∫†N C√ì L∆Ø·ª†I M√ÄI KH√ÅC 1
    # 6. Ph√¢n lo·∫°i tr∆∞·ªùng h·ª£p v·ªõi bi·∫øn nh·ªã ph√¢n
    b0 = model.NewBoolVar('b0') # s = 0
    b1 = model.NewBoolVar('b1') # s = 1
    b2 = model.NewBoolVar('b2') # s >= 2

    # R√†ng bu·ªôc cho b0, b1, b2
    model.Add(s == 0).OnlyEnforceIf(b0)
    model.Add(s != 0).OnlyEnforceIf(b0.Not())
    model.Add(s == 1).OnlyEnforceIf(b1)
    model.Add(s != 1).OnlyEnforceIf(b1.Not())
    model.Add(s >= 2).OnlyEnforceIf(b2)
    model.Add(s < 2).OnlyEnforceIf(b2.Not())

    # Ch·ªâ m·ªôt tr∆∞·ªùng h·ª£p x·∫£y ra
    model.Add(b0 + b1 + b2 == 1)

    # 7. T·ªïng bi·ªÉu th·ª©c: sum((a[i] + k[i]) * x[i])
    # Nh√¢n t·∫•t c·∫£ c√°c h·ªá s·ªë v·ªõi 100 ƒë·ªÉ bi·∫øn th√†nh s·ªë nguy√™n
    expr = sum(int(100 * (a[i] + k[i])) * x[i] for i in range(n))

    # 8. R√†ng bu·ªôc b·∫•t ƒë·∫≥ng th·ª©c d·ª±a tr√™n c
    # Nh√¢n c√°c gi√° tr·ªã b√™n ph·∫£i v·ªõi 100
    model.Add(expr <= int(100 * (length - 60))).OnlyEnforceIf(b0) 
    model.Add(expr <= int(100 * (length - 0))).OnlyEnforceIf(b1) 
    model.Add(expr <= int(100 * (length - 15))).OnlyEnforceIf(b2) # expr + 15 <= length => expr <= length - 15
    model.Add(int(100 * length * (1-0.015)) <= expr ) # Hao h·ª•t 1%

    # 9. L·ªõp callback ƒë·ªÉ thu th·∫≠p nghi·ªám
    class SolutionPrinter(cp_model.CpSolverSolutionCallback):
        def __init__(self, variables, special_indices, b0, b1, b2):
            cp_model.CpSolverSolutionCallback.__init__(self)
            self.variables_ = variables
            self.special_indices_ = special_indices
            self.b0_ = b0
            self.b1_ = b1
            self.b2_ = b2
            self.solutions_ = []

        def OnSolutionCallback(self):
            solution = np.array([self.Value(v) for v in self.variables_])
            special_values = [self.Value(self.variables_[i]) for i in self.special_indices_]
            num_nonzero = sum(1 for val in special_values if val > 0)
            if num_nonzero == 0:
                c = 60
            elif num_nonzero == 1:
                c = 0
            else:
                c = 15
            tong_chieu_dai_cat_duoc = sum((a + k) * solution) # (kich_thuoc_doan + hao_hut) * so_luong_doan
            if 0 < tong_chieu_dai_cat_duoc + c <= length:
                # X√°c ƒë·ªãnh tr∆∞·ªùng h·ª£p b0, b1, b2
                if self.Value(self.b0_):
                    case = "c=60"
                elif self.Value(self.b1_):
                    case = "c=0"
                else:
                    case = "c=15"
                self.solutions_.append((tong_chieu_dai_cat_duoc, solution, case))

        def get_sorted_solutions(self):
            return sorted(self.solutions_, reverse=True, key=lambda s: s[0])

    # 10. T√¨m t·∫•t c·∫£ nghi·ªám
    solver = cp_model.CpSolver()
    solver.parameters.log_search_progress = True # hi·ªÉn th·ªã log chi ti·∫øt

    solution_printer = SolutionPrinter(x, special_indices, b0, b1, b2)  # Truy·ªÅn b0, b1, b2
    solver.SearchForAllSolutions(model, solution_printer)

    # 11. In k·∫øt qu·∫£
    # print(f"T·ªïng s·ªë nghi·ªám: {len(solution_printer.solutions_)}")
    # for i, sol in enumerate(solution_printer.solutions_, 1):
    #     print(f"Nghi·ªám {i}: {sol}")

    return solution_printer.get_sorted_solutions()



# V√≠ d·ª• s·ª≠ d·ª•ng
KICH_THUOC_DOAN = [2360.8, 1684.8, 1289.2, 1162.2, 565, 46]
k = [1, 1, 1, 1, 3, 3] # C√°c v·ªã tr√≠ c√≥ k_i != 1 l√† x5, x6
LENGTH = 5850 # Gi·∫£ ƒë·ªãnh length = 100, b·∫°n c√≥ th·ªÉ thay ƒë·ªïi gi√° tr·ªã n√†y
SL_CAT = [600, 1200, 1200, 600, 1200, 1200]



# KICH_THUOC_DOAN = [2680.8, 2360.8, 2360.8, 1886.8, 1796.8, 1770.8, 1684.8, 1680.8, 1289.2, 1289.2, 1186.6, 1162.2, 645, 323, 565, 46]
# k = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 3, 3, 3]
# LENGTH = 5850  # Chi·ªÅu d√†i thanh s·∫Øt
# SL_CAT = [300, 300, 300, 600, 600, 600, 300, 600, 300, 600, 300, 300, 600, 300, 300, 1200]


solutions = solve_cp_model(KICH_THUOC_DOAN, k, LENGTH)

# ------------------------------ B∆Ø·ªöC 2 ------------------------------

# Tr√≠ch xu·∫•t ma tr·∫≠n t·ª´ danh s√°ch solutions
def extract_solution_matrix(solutions, num_sol=-1):
    """Tr√≠ch xu·∫•t ma tr·∫≠n t·ª´ danh s√°ch solutions."""
    solution_matrix = np.array([list(solution[1]) for solution in solutions[:num_sol]])
    return solution_matrix.T


# Chuy·ªÉn danh s√°ch solutions th√†nh ma tr·∫≠n
patterns = extract_solution_matrix(solutions)
hao_hut = np.array([LENGTH - solution[0] for solution in solutions])


SO_LUONG_TON_KHO = 20

# Kh·ªüi t·∫°o m√¥ h√¨nh t·ªëi ∆∞u
model = cp_model.CpModel()

m, n = patterns.shape # S·ªë pattern (h√†ng) v√† s·ªë ƒëo·∫°n (c·ªôt)

# T·∫°o bi·∫øn x[i] l√† s·ªë l·∫ßn s·ª≠ d·ª•ng m·ªói pattern
x_cay_sat = [model.NewIntVar(0, max(SL_CAT), f'x_{i}') for i in range(n)]

# R√†ng bu·ªôc: 0 <= (patterns * x - SL_CAT) <= SO_LUONG_TON_KHO (ƒë·∫£m b·∫£o ƒë·ªß s·ªë ƒëo·∫°n c·∫ßn thi·∫øt)
for i in range(m):
    model.Add((sum(patterns[i, j] * x_cay_sat[j] for j in range(n)) - SL_CAT[i]) >= 0)
    model.Add((sum(patterns[i, j] * x_cay_sat[j] for j in range(n)) - SL_CAT[i]) <= SO_LUONG_TON_KHO)

# H√†m m·ª•c ti√™u: Minimize t·ªïng hao h·ª•t

tong_so_patterns = model.NewIntVar(0, n, "tong_so_patterns")
bool_vars = [model.NewBoolVar(f'b_{i}') for i in range(n)]
for i in range(n):
    model.Add(x_cay_sat[i] > 0).OnlyEnforceIf(bool_vars[i])
    model.Add(x_cay_sat[i] == 0).OnlyEnforceIf(bool_vars[i].Not())
model.Add(tong_so_patterns == sum(bool_vars))

tong_hao_hut = sum(hao_hut[i] * x_cay_sat[i] for i in range(n))
# model.Minimize(tong_so_patterns + tong_hao_hut)
model.Minimize(tong_hao_hut)

# Gi·∫£i b√†i to√°n
solver = cp_model.CpSolver()
solver.parameters.log_search_progress = True # hi·ªÉn th·ªã log chi ti·∫øt
solver.parameters.max_time_in_seconds = 60 # D·ª´ng sau 60 gi√¢y
status = solver.Solve(model)

# Ki·ªÉm tra k·∫øt qu·∫£ t·ªëi ∆∞u
if status in (cp_model.OPTIMAL, cp_model.FEASIBLE):
    optimal_x = [solver.Value(x_var) for x_var in x_cay_sat] # S·ªë l∆∞·ª£ng c√¢y s·∫Øt cho t·ª´ng pattern

    # Nh√¢n ma tr·∫≠n patterns v·ªõi vector optimal_x
    result_matrix = np.dot(patterns, optimal_x)

    # In k·∫øt qu·∫£
    print("K√≠ch th∆∞·ªõc ƒëo·∫°n:")
    print(KICH_THUOC_DOAN)

    print("S·ªë l∆∞·ª£ng c·∫ßn:")
    print(SL_CAT)

    print("üîπ ƒê√£ c·∫Øt:")
    print(result_matrix)

    so_lan_cat = 0
    tong_hao_hut_sat = 0
    print("-"*40)
    print("C√°c b∆∞·ªõc c·∫Øt:")
    for solution, count in zip(solutions, optimal_x):
        if count > 0:
            so_lan_cat += 1
            print(f"L·∫ßn c·∫Øt th·ª© {so_lan_cat} || Hao h·ª•t: {LENGTH-solution[0]:.1f}mm || C·∫Øt {count} c√¢y s·∫Øt || {solution[2]}")
            tong_hao_hut_sat += (LENGTH-solution[0])*count
            # print(f"{solution}: {count}")
            for size, so_nhat in zip(KICH_THUOC_DOAN, solution[1]):
                if so_nhat > 0:
                    print(f"({size}mm: {so_nhat} nh√°t)", end=", ")
            print("\n")

    print("-"*40)
    so_cay_sat = sum(optimal_x)
    print(f"C·∫ßn {so_cay_sat} c√¢y s·∫Øt")
    print(f"Hao h·ª•t: {tong_hao_hut_sat / (LENGTH*so_cay_sat) * 100:.2f}%")

else:
    print("‚ùå Kh√¥ng t√¨m th·∫•y gi·∫£i ph√°p t·ªëi ∆∞u.")
